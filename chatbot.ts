import _ from "npm:lodash@^4.17.21";
import { ChatGPTAPI, ChatMessage } from "npm:chatgpt@5.0.6";
// @deno-types="npm:@types/node-telegram-bot-api@^0.57.6"
import TelegramBot from "npm:node-telegram-bot-api@^0.60.0";

import "https://deno.land/x/dotenv@v3.2.0/load.ts";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ª–æ–≥
async function logDialog(
  chatId: number,
  chatType: string,
  userName: string,
  userMessage: string,
  botResponse: string,
  isAutoComment: boolean = false,
) {
  const timestamp = new Date().toISOString();

  const logLine =
    `[${timestamp}] ${chatType} | ${userName} (${chatId}): "${userMessage}" ‚Üí BOT: "${botResponse}" ${
      isAutoComment ? "(AUTO)" : ""
    }\n${"=".repeat(100)}\n`;

  try {
    await Deno.writeTextFile("dialogs.log", logLine, { append: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –¥–∏–∞–ª–æ–≥–æ–≤:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
function logWithTime(...args: unknown[]) {
  const timestamp = new Date().toLocaleString("ru-RU");
  console.log(timestamp, ...args);
}

const BOT_TOKEN = Deno.env.get("BOT_TOKEN");
const OPENROUTER_API_KEY = Deno.env.get("OPENROUTER_API_KEY");
const OPENROUTER_MODEL = Deno.env.get("OPENROUTER_MODEL") ??
  "cognitivecomputations/dolphin-mistral-24b-venice-edition:free";
const OPENROUTER_API_BASE = Deno.env.get("OPENROUTER_API_BASE") ??
  "https://openrouter.ai/api";
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
const COMMENT_ALL_MESSAGES = Deno.env.get("COMMENT_ALL_MESSAGES") === "true";
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
const DEFAULT_STYLE = Deno.env.get("DEFAULT_STYLE") || "";
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const AUTO_COMMENT_CHANCE = parseInt(
  Deno.env.get("AUTO_COMMENT_CHANCE") || "15",
); // –®–∞–Ω—Å –≤ %
const MIN_MESSAGES_TO_TRIGGER = parseInt(
  Deno.env.get("MIN_MESSAGES_TO_TRIGGER") || "3",
); // –ú–∏–Ω–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π
const AUTO_COMMENT_COOLDOWN = parseInt(
  Deno.env.get("AUTO_COMMENT_COOLDOWN") || "300",
); // –ü–∞—É–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã —á–µ—Ä–µ–∑ n8n
const N8N_TOPIC_URL = Deno.env.get("N8N_TOPIC_URL");
const N8N_TIMEOUT_MS = parseInt(Deno.env.get("N8N_TIMEOUT_MS") || "5000");

if (!BOT_TOKEN || !OPENROUTER_API_KEY) {
  logWithTime("‚õîÔ∏è BOT_TOKEN and OPENROUTER_API_KEY must be set");
  Deno.exit(1);
}

// Start telegram bot

const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const botInfo = await bot.getMe();
const botName = botInfo.username ?? "";

if (!botName) {
  logWithTime("‚õîÔ∏è Bot username not found");
  Deno.exit(1);
} else {
  logWithTime("ü§ñ Bot", `@${botName}`, "has started...");
}

// Start OpenRouter API
let openRouterAPI: ChatGPTAPI;
try {
  openRouterAPI = new ChatGPTAPI({
    apiKey: OPENROUTER_API_KEY,
    apiBaseUrl: OPENROUTER_API_BASE,
    completionParams: { model: OPENROUTER_MODEL },
  });
} catch (err) {
  logWithTime("‚õîÔ∏è OpenRouter API error:", err.message);
  Deno.exit(1);
}
logWithTime(
  "üîÆ OpenRouter API has started with model",
  OPENROUTER_MODEL,
);

// Track conversation, parent message IDs and style for each chat
const chatContext = new Map<
  number,
  { conversationID?: string; parentMessageID?: string; style?: string }
>();

// –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const chatActivity = new Map<
  number,
  {
    topicMessageCount: number;
    lastMessages: Array<{ text: string; timestamp: number; userName: string }>;
    lastAutoComment: number;
    lastMessageTime: number;
    isInitialized: boolean; // –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    currentTopic: string; // –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    topicChangeTime: number; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã
  }
>();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —á–µ—Ä–µ–∑ n8n
async function analyzeTopic(
  messages: Array<{ text: string; userName: string }>,
): Promise<string> {
  if (!N8N_TOPIC_URL) return "–æ–±—â–∏–π";

  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), N8N_TIMEOUT_MS);

  try {
    const resp = await fetch(N8N_TOPIC_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ messages }),
      signal: controller.signal,
    });
    clearTimeout(timeoutId);
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    const text = await resp.text();
    try {
      const data = JSON.parse(text);
      if (typeof data === "string") return data || "–æ–±—â–∏–π";
      if (typeof data.topic === "string") return data.topic || "–æ–±—â–∏–π";
      if (typeof data.label === "string") return data.label || "–æ–±—â–∏–π";
      return "–æ–±—â–∏–π";
    } catch {
      return text.trim() || "–æ–±—â–∏–π";
    }
  } catch (error) {
    logWithTime("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã —á–µ—Ä–µ–∑ n8n:", error?.message || error);
    return "–æ–±—â–∏–π";
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
async function initializeChatContext(chatId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
    const updates = await bot.getUpdates({
      limit: 100, // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞
      timeout: 1,
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    const chatMessages = updates
      .filter((update) => update.message?.chat.id === chatId)
      .map((update) => update.message)
      .filter((msg) => msg && msg.text && !msg.from?.is_bot)
      .slice(-30); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π

    if (chatMessages.length > 0) {
      const activity = chatActivity.get(chatId) || {
        topicMessageCount: chatMessages.length,
        lastMessages: [],
        lastAutoComment: 0,
        lastMessageTime: 0,
        isInitialized: false,
        currentTopic: "–æ–±—â–∏–π",
        topicChangeTime: Date.now(),
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const now = Date.now();
      activity.lastMessages = chatMessages.map((msg) => ({
        text: msg.text!,
        timestamp: now -
          (chatMessages.length - chatMessages.indexOf(msg)) * 60000, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        userName: msg.from?.first_name || msg.from?.username || "Unknown",
      }));

      activity.topicMessageCount = chatMessages.length;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ n8n
      activity.currentTopic = await analyzeTopic(activity.lastMessages);
      activity.isInitialized = true;
      chatActivity.set(chatId, activity);

      logWithTime(
        `üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ ${chatId} —Å ${chatMessages.length} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —Ç–µ–º–∞: ${activity.currentTopic}`,
      );
    }
  } catch (error) {
    logWithTime(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –±–æ—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
async function shouldAutoComment(
  chatId: number,
  messageText: string,
  userName: string,
): Promise<boolean> {
  const now = Date.now();
  const activity = chatActivity.get(chatId) || {
    topicMessageCount: 0,
    lastMessages: [],
    lastAutoComment: 0,
    lastMessageTime: 0,
    isInitialized: false,
    currentTopic: "–æ–±—â–∏–π",
    topicChangeTime: now,
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  activity.topicMessageCount++;
  activity.lastMessages.push({ text: messageText, timestamp: now, userName });
  activity.lastMessageTime = now;

  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
  const fiveMinutesAgo = now - (5 * 60 * 1000);
  activity.lastMessages = activity.lastMessages.filter((msg) =>
    msg.timestamp > fiveMinutesAgo
  );

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
  const newTopic = await analyzeTopic(activity.lastMessages);
  const topicChanged = newTopic !== activity.currentTopic;

  if (topicChanged) {
    activity.currentTopic = newTopic;
    activity.topicChangeTime = now;
    activity.topicMessageCount = 1; // —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–≤–æ–µ –≤ –Ω–æ–≤–æ–π —Ç–µ–º–µ
    logWithTime(
      `üîÑ –°–º–µ–Ω–∞ —Ç–µ–º—ã –≤ —á–∞—Ç–µ ${chatId}: ${activity.currentTopic} ‚Üí ${newTopic}`,
    );
  }

  chatActivity.set(chatId, activity);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
  // 1. –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  // 2. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
  // 3. –°–ª—É—á–∞–π–Ω—ã–π —à–∞–Ω—Å —Å—Ä–∞–±–æ—Ç–∞–ª –ò–õ–ò –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ —Ç–µ–º—ã

  const timeSinceLastComment = (now - activity.lastAutoComment) / 1000;
  const hasRecentActivity =
    activity.topicMessageCount >= MIN_MESSAGES_TO_TRIGGER;
  const cooldownPassed = timeSinceLastComment >= AUTO_COMMENT_COOLDOWN;
  let randomNum = 0;
  let randomChance = false;
  if (hasRecentActivity) {
    randomNum = Math.random() * 100;
    randomChance = randomNum < AUTO_COMMENT_CHANCE;
  }
  const topicChangeTrigger = topicChanged && timeSinceLastComment >= 60; // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ —Å–º–µ–Ω—É —Ç–µ–º—ã —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  logWithTime(`üîç –ê–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, {
    messages: activity.lastMessages.length,
    topicMessages: activity.topicMessageCount,
    hasActivity: hasRecentActivity,
    timeSince: Math.round(timeSinceLastComment),
    cooldown: AUTO_COMMENT_COOLDOWN,
    cooldownOk: cooldownPassed,
    random: hasRecentActivity ? Math.round(randomNum) : null,
    chance: AUTO_COMMENT_CHANCE,
    randomOk: randomChance,
    topicChanged,
    topicChangeTrigger,
    currentTopic: activity.currentTopic,
    willComment: (hasRecentActivity && cooldownPassed && randomChance) ||
      topicChangeTrigger,
  });

  if (
    (hasRecentActivity && cooldownPassed && randomChance) || topicChangeTrigger
  ) {
    activity.lastAutoComment = now;
    activity.topicMessageCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    chatActivity.set(chatId, activity);
    return true;
  }

  return false;
}

// Handle messages
bot.on("message", async (msg) => {
  await handleMessage(msg);
});

function handleCommand(
  msg: TelegramBot.Message,
  trimmedText: string,
): boolean {
  // reload command
  if (trimmedText === "/reload" || trimmedText == "/reset") {
    chatContext.delete(msg.chat.id);
    bot.sendMessage(msg.chat.id, "üîÑ Conversation has been reset, enjoy!");
    logWithTime("üîÑ Conversation has been reset");
    return true;
  }

  // style command
  if (trimmedText.startsWith("/style")) {
    const styleText = trimmedText.replace("/style", "").trim();
    if (styleText) {
      const state = chatContext.get(msg.chat.id) ?? {};
      state.style = styleText;
      chatContext.set(msg.chat.id, state);
      bot.sendMessage(msg.chat.id, "‚úÖ Style updated");
      logWithTime("üé® Style updated for", msg.chat.id, styleText);
    } else {
      bot.sendMessage(msg.chat.id, "‚ö†Ô∏è Please provide a style");
    }
    return true;
  }

  // help command
  if (trimmedText === "/help") {
    const state = chatContext.get(msg.chat.id) ?? {};
    const currentStyle = state.style || DEFAULT_STYLE;

    const helpText =
      `ü§ñ This is a chatbot powered by OpenRouter models. You can use the following commands:

/reload - Reset the conversation
/style <text> - Set response style
/help - Show this message

${
        COMMENT_ALL_MESSAGES
          ? "‚úÖ Commenting all messages in groups"
          : "‚ùå Only responding to @mentions in groups"
      }
${
        currentStyle
          ? `üé≠ Current style: ${currentStyle.slice(0, 50)}${
            currentStyle.length > 50 ? "..." : ""
          }`
          : "üé≠ No style set"
      }`;

    bot.sendMessage(msg.chat.id, helpText);
    return true;
  }
  return false;
}

// Parse message and send to OpenRouter if needed
async function handleMessage(msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  if (!msg.text) {
    return;
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
  if (msg.from?.is_bot && msg.from?.username === botName) {
    return;
  }

  const userName =
    `${msg.from?.first_name || ""} ${msg.from?.last_name || ""}`.trim() ||
    msg.from?.username || "Unknown";
  logWithTime(
    `üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ${chatId} –æ—Ç ${userName}: ${msg.text}`,
  );

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
  const activity = chatActivity.get(chatId);
  if (
    !activity?.isInitialized &&
    (msg.chat.type === "group" || msg.chat.type === "supergroup")
  ) {
    await initializeChatContext(chatId);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –ª—é–±–æ–º —Ç–∏–ø–µ —á–∞—Ç–∞
  if (handleCommand(msg, msg.text.trim())) {
    return;
  }

  // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤: —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
  let trimmedText: string;
  let shouldRespond = false;

  if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
    const entities = msg.entities || [];
    const isMentioned = entities.some((entity) => {
      if (entity.type === "mention") {
        const mentionText = msg.text?.slice(
          entity.offset,
          entity.offset + entity.length,
        );
        return mentionText?.toLowerCase() === `@${botName.toLowerCase()}`;
      }
      if (entity.type === "text_mention") {
        return entity.user?.username?.toLowerCase() === botName.toLowerCase();
      }
      return false;
    });
    const isReplyToBot = msg.reply_to_message?.from?.username?.toLowerCase() ===
      botName.toLowerCase();

    if (isMentioned || isReplyToBot) {
      // –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—á–∞—é—Ç –µ–º—É - –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º
      const mentionRegex = new RegExp(`@${botName}`, "gi");
      const baseText = msg.text.replace(mentionRegex, "").trim();
      const activity = chatActivity.get(chatId);
      const topicInfo = activity?.currentTopic
        ? `–¢–µ–º–∞: ${activity.currentTopic}. `
        : "";
      trimmedText = `${topicInfo}${baseText}`;
      shouldRespond = true;
      logWithTime(
        `üì¢ –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ ${chatId}: ${trimmedText}`,
      );
    } else if (COMMENT_ALL_MESSAGES) {
      // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      trimmedText = msg.text.trim();
      shouldRespond = true;
    } else {
      // –ù–æ–≤—ã–π —É–º–Ω—ã–π —Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –≤–∫–ª–∏–Ω–∏–≤–∞–µ–º—Å—è
      const shouldAutoReply = await shouldAutoComment(
        chatId,
        msg.text,
        userName,
      );
      if (shouldAutoReply) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        const activity = chatActivity.get(chatId);
        const recentMessages = activity?.lastMessages || [];

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const contextWithUsers = recentMessages
          .map((msg) => `${msg.userName}: ${msg.text}`)
          .join(" | ");

        const topicInfo = activity?.currentTopic
          ? `–¢–µ–º–∞: ${activity.currentTopic}. `
          : "";
        trimmedText =
          `${topicInfo}–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã: ${contextWithUsers}. –ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ —Ç–µ–º–µ, –≤–∫–ª–∏–Ω—å—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.`;
        shouldRespond = true;
        logWithTime(
          `ü§ñ –ê–≤—Ç–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —á–∞—Ç–µ ${chatId} –Ω–∞ –æ—Å–Ω–æ–≤–µ ${recentMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–µ–º–∞: ${activity?.currentTopic}`,
        );
      } else {
        // –ü—Ä–æ—Å—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return;
      }
    }
  } else {
    // –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    trimmedText = msg.text.trim();
    shouldRespond = true;
  }

  if (!shouldRespond) {
    return;
  }

  if (trimmedText === "") {
    return;
  }

  logWithTime(`üì© Message from ${msg.chat.id}:`, trimmedText);

  // Send a message to the chat acknowledging receipt of their message
  let respMsg: TelegramBot.Message;
  try {
    respMsg = await bot.sendMessage(chatId, "ü§î");
    bot.sendChatAction(chatId, "typing");
  } catch (err) {
    logWithTime("‚õîÔ∏è Telegram API error:", err.message);
    return;
  }

  // Send message to OpenRouter
  try {
    const state = chatContext.get(chatId) ?? {};
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ –∏–ª–∏ —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const currentStyle = state.style || DEFAULT_STYLE;
    const response: ChatMessage = await openRouterAPI.sendMessage(trimmedText, {
      conversationId: state.conversationID,
      parentMessageId: state.parentMessageID,
      systemMessage: currentStyle,
      onProgress: _.throttle(
        async (partialResponse: ChatMessage) => {
          respMsg = await editMessage(
            respMsg,
            escapeMarkdown(partialResponse.text),
            false,
          );
          bot.sendChatAction(chatId, "typing");
        },
        4000,
        { leading: true, trailing: false },
      ),
    });
    // Update conversationID and parentMessageID for this chat
    chatContext.set(chatId, {
      conversationID: response.conversationId,
      parentMessageID: response.id,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—è—Å–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ
    const isAskingForExplanation =
      trimmedText.toLowerCase().includes("–ø–æ—è—Å–Ω–∏") ||
      trimmedText.toLowerCase().includes("–æ–±—ä—è—Å–Ω–∏") ||
      trimmedText.toLowerCase().includes("—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ") ||
      trimmedText.toLowerCase().includes("—á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É");

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç –ø–æ—è—Å–Ω–∏—Ç—å)
    const maxLength = isAskingForExplanation ? 500 : 200;
    const limitedResponse = limitResponseLength(response.text, maxLength);
    editMessage(respMsg, escapeMarkdown(limitedResponse));
    logWithTime(
      `üì® Response (limited to ${maxLength} chars):`,
      limitedResponse,
    );

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª
    const chatType = msg.chat.type === "private" ? "PRIVATE" : "GROUP";
    const isAutoComment = trimmedText.includes("–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã:");

    await logDialog(
      chatId,
      chatType,
      userName,
      msg.text,
      limitedResponse,
      isAutoComment,
    );
  } catch (err) {
    logWithTime("‚õîÔ∏è OpenRouter API error:", err.message);
    // If the error contains session token has expired, then get a new session token
    if (err.message.includes("session token may have expired")) {
      bot.sendMessage(chatId, "üîë Token has expired, please update the token.");
    } else {
      bot.sendMessage(
        chatId,
        "ü§ñ Sorry, I'm having trouble connecting to the server, please try again later.",
      );
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
function limitResponseLength(text: string, maxLength: number = 200): string {
  if (text.length <= maxLength) {
    return text;
  }

  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –≤ –ª–∏–º–∏—Ç
  const sentences = text.split(/[.!?]+/).filter((s) => s.trim().length > 0);
  let result = "";

  for (const sentence of sentences) {
    const testResult = result + sentence + ".";
    if (testResult.length <= maxLength) {
      result = testResult;
    } else {
      break;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
  if (!result) {
    const words = text.split(" ");
    result = words.slice(0, Math.floor(maxLength / 8)).join(" ") + "...";
  }

  return result;
}

// Escape Telegram MarkdownV2 special characters
function escapeMarkdown(text: string): string {
  return text.replace(/[_*\[\]()~`>#+\-=|{}.!]/g, "\\$&");
}

// Edit telegram message
async function editMessage(
  msg: TelegramBot.Message,
  text: string,
  needParse = true,
): Promise<TelegramBot.Message> {
  if (msg.text === text || !text || text.trim() === "") {
    return msg;
  }
  try {
    const resp = await bot.editMessageText(text, {
      chat_id: msg.chat.id,
      message_id: msg.message_id,
      parse_mode: needParse ? "MarkdownV2" : undefined,
    });
    // type of resp is boolean | Message
    if (typeof resp === "object") {
      // return a Message type instance if resp is a Message type
      return resp as TelegramBot.Message;
    } else {
      // return the original message if resp is a boolean type
      return msg;
    }
  } catch (err) {
    logWithTime("‚õîÔ∏è Edit message error:", err.message);
    return msg;
  }
}
